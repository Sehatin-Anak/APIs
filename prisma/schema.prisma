generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  refreshToken String?  @unique
}

model Child {
  id          Int         @id @default(autoincrement())
  tokenId     String
  name        String
  age         Int
  gender      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  ageCategory Int?
  foodRecom   FoodRecom[]
}

model FoodRecom {
  id              Int            @id @default(autoincrement())
  name            String
  description     String         @db.VarChar(1000)
  img             String
  Category        String
  agregateRating  Float
  reviewCount     Int
  nutritionInfoId Int            @unique
  childId         Int
  nutritionInfo   NutritionInfo  @relation(fields: [nutritionInfoId], references: [id])
  child           Child          @relation(fields: [childId], references: [id])
  Ingredients     FoodRecomIngredient[]
  Instructions    FoodRecomInstruction[]
  bookmark        UserBookmark[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model NutritionInfo {
  id            Int        @id @default(autoincrement())
  calories      String
  fat           String
  saturatedFat  String
  cholesterol   String
  sodium        String
  carbohydrates String
  fiber         String
  sugar         String
  protein       String
  foodRecom     FoodRecom?
}

model FoodRecomIngredient {
  id          Int       @default(autoincrement())
  ingredient  String
  quality     String    @db.VarChar(1000)
  foodRecomId Int
  foodRecom   FoodRecom @relation(fields: [foodRecomId], references: [id])

  @@id([id, ingredient])
}

model FoodRecomInstruction {
  id          Int       @default(autoincrement())
  stepOrder   Int
  instruction String
  foodRecomId Int
  foodRecom   FoodRecom @relation(fields: [foodRecomId], references: [id])

  @@id([id, stepOrder])
}

model Article {
  id        Int            @id @default(autoincrement())
  author    String
  year      Int
  title     String
  content   String         @db.VarChar(5000)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  bookmark  UserBookmark[]
}

model UserBookmark {
  id          Int        @id @default(autoincrement())
  userToken   String
  foodRecomId Int?
  articleId   Int?
  foodRecom   FoodRecom? @relation(fields: [foodRecomId], references: [id])
  article     Article?   @relation(fields: [articleId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userToken, foodRecomId], name: "User_FoodRecom_Unique")
  @@unique([userToken, articleId], name: "User_Article_Unique")
}
