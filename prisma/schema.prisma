generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id           String         @id
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  email        String         @unique
  img          String
  name         String
  child        child?
  userbookmark userbookmark[]
}

model article {
  id              Int           @id @default(autoincrement())
  title           String
  content         String        @db.VarChar(5000)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  publicationDate String
  url             String
  author          author[]
  userbookmark    userbookmark?

  @@fulltext([title, content], map: "Article_title_content_idx")
}

model author {
  id        Int     @id @default(autoincrement())
  articleId Int
  name      String
  article   article @relation(fields: [articleId], references: [id], map: "Author_articleId_fkey")

  @@index([articleId], map: "Author_articleId_fkey")
}

model child {
  id          Int         @id @default(autoincrement())
  name        String
  age         Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  ageCategory Int?
  tall        Int
  weight      Int
  userId      String?     @unique(map: "Child_userId_key")
  user        user?       @relation(fields: [userId], references: [id], map: "Child_userId_fkey")
  foodrecom   foodrecom[]
}

model foodrecom {
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  childId              Int
  Category             String
  agregateRating       Float
  description          String                 @db.VarChar(1000)
  img                  String
  name                 String
  nutritionInfoId      Int?                   @unique(map: "FoodRecom_nutritionInfoId_key")
  reviewCount          Int
  ageCategory          Int?
  child                child                  @relation(fields: [childId], references: [id], map: "FoodRecom_childId_fkey")
  nutritioninfo        nutritioninfo?         @relation(fields: [nutritionInfoId], references: [id], map: "FoodRecom_nutritionInfoId_fkey")
  foodrecomingredient  foodrecomingredient[]
  foodrecominstruction foodrecominstruction[]
  userbookmark         userbookmark?

  @@index([childId], map: "FoodRecom_childId_fkey")
  @@fulltext([name, description, Category], map: "FoodRecom_name_description_Category_idx")
}

model foodrecomingredient {
  id          Int       @default(autoincrement())
  ingredient  String
  foodRecomId Int
  foodrecom   foodrecom @relation(fields: [foodRecomId], references: [id], map: "FoodRecomIngredient_foodRecomId_fkey")

  @@id([id, ingredient])
  @@index([foodRecomId], map: "FoodRecomIngredient_foodRecomId_fkey")
  @@fulltext([ingredient], map: "FoodRecomIngredient_ingredient_idx")
}

model foodrecominstruction {
  id          Int       @default(autoincrement())
  stepOrder   Int
  instruction String    @db.VarChar(2000)
  foodRecomId Int
  foodrecom   foodrecom @relation(fields: [foodRecomId], references: [id], map: "FoodRecomInstruction_foodRecomId_fkey")

  @@id([id, stepOrder])
  @@index([foodRecomId], map: "FoodRecomInstruction_foodRecomId_fkey")
  @@fulltext([instruction], map: "FoodRecomInstruction_instruction_idx")
}

model nutritioninfo {
  id            Int        @id @default(autoincrement())
  calories      Float
  fat           Float
  saturatedFat  Float
  cholesterol   Float
  sodium        Float
  carbohydrates Float
  fiber         Float
  sugar         Float
  protein       Float
  foodrecom     foodrecom?
}

model userbookmark {
  id          Int        @id @default(autoincrement())
  foodRecomId Int?       @unique(map: "UserBookmark_foodRecomId_key")
  articleId   Int?       @unique(map: "UserBookmark_articleId_key")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  userId      String?
  article     article?   @relation(fields: [articleId], references: [id], map: "UserBookmark_articleId_fkey")
  foodrecom   foodrecom? @relation(fields: [foodRecomId], references: [id], map: "UserBookmark_foodRecomId_fkey")
  user        user?      @relation(fields: [userId], references: [id], map: "UserBookmark_userId_fkey")

  @@unique([userId, articleId], map: "UserBookmark_userId_articleId_key")
  @@unique([userId, foodRecomId], map: "UserBookmark_userId_foodRecomId_key")
}
